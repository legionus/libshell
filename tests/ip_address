#!/bin/ash -efu

ip_address_test400() { # UnitTest
	. ../shell-ip-address

	local rc=0 out=
	local repr=0.0.0.0
	ipv4_ptonx "$repr" || rc=1
	out="$(ipv4_ptonx "$repr")"

	assertTrue "the unspecified address" $rc
	assertEquals "00000000" "$out"
}

ip_address_test401() { # UnitTest
	. ../shell-ip-address

	local rc=0 out=
	local repr=192.0.0.2
	ipv4_ptonx "$repr" || rc=1
	out="$(ipv4_ptonx "$repr")"

	assertTrue "well-formed IPv4 address: $repr" $rc
	assertEquals "c0000002" "$out"
}

ip_address_test402() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=8.0.0.292
	ipv4_ptonx "$repr" || rc=1

	assertFalse "octet out of range: $repr" $rc
}

ip_address_test403() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=8.0.0.-1
	ipv4_ptonx "$repr" || rc=1

	assertFalse "negative octets: $repr" $rc
}

ip_address_test404() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=-8.0.0.81
	ipv4_ptonx "$repr" || rc=1

	assertFalse "negative octets: $repr" $rc
}

ip_address_test405() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=16777217
	ipv4_ptonx "$repr" || rc=1

	# There is an older library function, inet_aton(3), which supports this
	# and other peculiar address notations. We do not.
	assertFalse "decimal u32: $repr (1.0.0.1)" $rc
}

ip_address_test406() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=11111111111
	ipv4_ptonx "$repr" || rc=1

	assertFalse "decimal above u32: $repr" $rc
}

ip_address_test407() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=0x16777217
	ipv4_ptonx "$repr" || rc=1

	# There is an older library function, inet_aton(3), which supports this
	# and other peculiar address notations. We do not.
	assertFalse "hexadecimal u32: $repr (22.119.114.23)" $rc
}

ip_address_test408() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=1.2.3.4.5.6
	ipv4_ptonx "$repr" || rc=1

	assertFalse "too many octets: $repr" $rc
}

ip_address_test409() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr="192.0.0.2."
	ipv4_ptonx "$repr" || rc=1

	assertFalse "extra period: $repr" $rc
}

ip_address_test410() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=...
	ipv4_ptonx "$repr" || rc=1

	assertFalse "no digits: '$repr'" $rc
}

ip_address_test411() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=....
	ipv4_ptonx "$repr" || rc=1

	assertFalse "no digits: '$repr'" $rc
}

ip_address_test412() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=::
	ipv4_ptonx "$repr" || rc=1

	assertFalse "valid IPv6 address: '$repr'" $rc
}

ip_address_test413() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8::9
	ipv4_ptonx "$repr" || rc=1

	assertFalse "valid IPv6 address: '$repr'" $rc
}

ip_address_test414() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=''
	ipv4_ptonx "$repr" || rc=1

	assertFalse "empty string" $rc
}

ip_address_test415() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=example.com
	ipv4_ptonx "$repr" || rc=1

	assertFalse "domain name: $repr" $rc
}

ip_address_test416() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=163.com
	ipv4_ptonx "$repr" || rc=1

	assertFalse "domain name: $repr" $rc
}

ip_address_test418() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=4.5.6.7.in-addr.arpa
	ipv4_ptonx "$repr" || rc=1

	assertFalse "reverse pointer domain name: $repr" $rc
}

ip_address_test419() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=1.0.0.1:443
	ipv4_ptonx "$repr" || rc=1

	assertFalse "socket address with 16-bit port: '$repr'" $rc
}

ip_address_test600() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=::
	ipv6_ptonx "$repr" || rc=1

	assertTrue "unspecified address: $repr" $rc
}

ip_address_test601() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:DB8:0:502:BC:A:9:8
	ipv6_ptonx "$repr" || rc=1

	assertTrue "valid address in uppercase digits: $repr" $rc
}

ip_address_test603() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=::b
	ipv6_ptonx "$repr" || rc=1

	assertTrue "leading skip block: $repr" $rc
}

ip_address_test604() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=::a:3b
	ipv6_ptonx "$repr" || rc=1

	assertTrue "leading skip block: $repr" $rc
}

ip_address_test605() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=7::
	ipv6_ptonx "$repr" || rc=1

	assertTrue "trailing skip block: $repr" $rc
}

ip_address_test606() { # UnitTest
	. ../shell-ip-address

	local rc=0 out=
	local repr=44::5
	ipv6_ptonx "$repr" || rc=1
	out="$(ipv6_ptonx "$repr")"

	assertTrue "middle skip block: $repr" $rc
	assertEquals "00440000000000000000000000000005" "$out"
}

ip_address_test607() { # UnitTest
	. ../shell-ip-address

	local rc=0 out=
	local repr=44:5::
	ipv6_ptonx "$repr" || rc=1
	out="$(ipv6_ptonx "$repr")"

	assertTrue "trailing skip block: $repr" $rc
	assertEquals "00440005000000000000000000000000" "$out"
}

ip_address_test608() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2002::
	ipv6_ptonx "$repr" || rc=1

	assertTrue "trailing skip block: $repr" $rc
}

ip_address_test609() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8:4:5:6:7:7::
	ipv6_ptonx "$repr" || rc=1

	assertTrue "16-bit trailing skip block: $repr" $rc
}

ip_address_test610() { # UnitTest
	. ../shell-ip-address

	local rc=0 out32=
	local repr=2001:7::23:443
	ipv6_ptonx "$repr" || rc=1
	out32="$(ipv6_ptonx "$repr" | tr -d '\n' | tail -c8)"

	assertTrue "sockaddr lookalike: $repr" $rc
	assertEquals '0x00230443' "0x$out32"
}

ip_address_test611() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8:0:603:b:a:99.11.6.18
	ipv6_ptonx "$repr" || rc=1

	assertTrue "IPv4-mapped tail: $repr" $rc
}

ip_address_test612() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=ff02::3:0:0:0:1:a
	ipv6_ptonx "$repr" || rc=1

	assertTrue "skip block in unusual position: $repr" $rc
}

ip_address_test613() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=abcd:ef01:2345:6789:bcde:fa01:2345:6789
	ipv6_ptonx "$repr" || rc=1

	assertTrue "uncompressible address: $repr" $rc
}

ip_address_test614() { # UnitTest
	. ../shell-ip-address

	local rc=0 out=
	local repr=2001:db8:0:0:8:800:200c:417a
	ipv6_ptonx "$repr" || rc=1
	out="$(ipv6_ptonx "$repr")"

	assertTrue "valid address: $repr" $rc
	assertEquals "20010db80000000000080800200c417a" "$out"
}

ip_address_test615() { # UnitTest
	. ../shell-ip-address

	local rc=0 out=
	local repr=2001:db8:0000:0000:0008:0800:200c:417a
	ipv6_ptonx "$repr" || rc=1
	out="$(ipv6_ptonx "$repr")"

	assertTrue "leading zeroes: $repr" $rc
	assertEquals "20010db80000000000080800200c417a" "$out"
}

ip_address_test616() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8::192.7.6.5
	ipv6_ptonx "$repr" || rc=1

	assertTrue "skip block and IPv4-mapped tail: $repr" $rc
}

ip_address_test617() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2002:0a7f:8c44:001f:abcd:ef01:130.141.152.163
	ipv6_ptonx "$repr" || rc=1

	assertTrue "max length string: $repr" $rc
}

ip_address_test618() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8:0:402:b:a:9:8
	ipv6_ptonx "$repr" || rc=1

	assertTrue "valid address: $repr" $rc
}

ip_address_test619() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8:0:402:b:a:9::
	ipv6_ptonx "$repr" || rc=1

	assertTrue "16-bit trailing skip block: $repr" $rc
}

ip_address_test620() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=::f890:0a:10:8c44:79a3:5120:1304
	ipv6_ptonx "$repr" || rc=1

	assertTrue "16-bit leading skip block: $repr" $rc
}

ip_address_test621() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=''
	ipv6_ptonx "$repr" || rc=1

	assertFalse "empty string: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test622() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2005
	ipv6_ptonx "$repr" || rc=1

	assertFalse "single component, no colon: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test625() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=:
	ipv6_ptonx "$repr" || rc=1

	assertFalse "single colon: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test626() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=:12
	ipv6_ptonx "$repr" || rc=1

	assertFalse "single colon, too short: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test627() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=44:5
	ipv6_ptonx "$repr" || rc=1

	assertFalse "single colon, too short: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test628() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=200a:b:
	ipv6_ptonx "$repr" || rc=1

	assertFalse "too short: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test629() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001::g
	ipv6_ptonx "$repr" || rc=1

	assertFalse "bad char: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test630() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001::H
	ipv6_ptonx "$repr" || rc=1

	assertFalse "bad uppercase char: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test631() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8:f:e:d:c:8:9:a:b
	ipv6_ptonx "$repr" || rc=1

	assertFalse "too many components: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test632() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8::f:edc89
	ipv6_ptonx "$repr" || rc=1

	assertFalse "component too long: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test633() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8:0:103c:b:a:9::8
	ipv6_ptonx "$repr" || rc=1

	assertFalse "no 16-bit zeroed word at skip block: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test634() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=8::f890:0a:10:8c44:79a3:5120:1304
	ipv6_ptonx "$repr" || rc=1

	assertFalse "no 16-bit zeroed word at skip block: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test635() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001::5::23
	ipv6_ptonx "$repr" || rc=1

	assertFalse "two skip blocks have undefined meaning: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test636() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=:::
	ipv6_ptonx "$repr" || rc=1

	assertFalse "colon cancer: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test637() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=::::
	ipv6_ptonx "$repr" || rc=1

	assertFalse "colon cancer: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test638() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=:::::::
	ipv6_ptonx "$repr" || rc=1

	assertFalse "all components empty: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test639() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001::::
	ipv6_ptonx "$repr" || rc=1

	assertFalse "terminal colon cancer: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test640() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:7:8:9:a:b:c:d:443
	ipv6_ptonx "$repr" || rc=1

	assertFalse "naive sockaddr lookalike, too many components: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test641() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr='[2001:7::23]':443
	ipv6_ptonx "$repr" || rc=1

	# We are not the tool for this job.
	assertFalse "actual sockaddr: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test642() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:0:1:2:3:4:192.44.42.58:443
	ipv6_ptonx "$repr" || rc=1

	assertFalse "IPv4 literal not at end: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test643() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:0:3:4:192.44.42.58
	ipv6_ptonx "$repr" || rc=1

	assertFalse "IPv4 literal too early: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test644() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:1:2:3:4:5:6:7:192.44.42.58
	ipv6_ptonx "$repr" || rc=1

	assertFalse "IPv4 literal too late: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test645() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8::192.6.5
	ipv6_ptonx "$repr" || rc=1

	assertFalse "truncated IPv4 literal: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test646() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8::192.6
	ipv6_ptonx "$repr" || rc=1

	assertFalse "truncated IPv4 literal: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test647() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8::.6
	ipv6_ptonx "$repr" || rc=1

	assertFalse "malformed dot notation literal: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test648() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=2001:db8::...
	ipv6_ptonx "$repr" || rc=1

	assertFalse "malformed dot-notation literal: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test649() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=fe80:1:2:3:4:5:6:7%en0
	ipv6_ptonx "$repr" || rc=1

	assertFalse "LLA with scope identifier: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test650() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=example.com
	ipv6_ptonx "$repr" || rc=1

	assertFalse "domain name: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test651() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=163.com
	ipv6_ptonx "$repr" || rc=1

	assertFalse "domain name starting with digits: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test652() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=11.10.9.8.in-addr.arpa
	ipv6_ptonx "$repr" || rc=1

	assertFalse "reverse pointer domain name: $repr" $rc
	assertNull "empty output" "$(ipv6_ptonx "$repr")"
}

ip_address_test6t00() { # UnitTest
	. ../shell-ip-address

	local repr=::
	local target=unspec
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t01() { # UnitTest
	. ../shell-ip-address

	local repr=::1
	local target=loopback
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t02() { # UnitTest
	. ../shell-ip-address

	local repr=::c000:8
	local target=other
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t03() { # UnitTest
	. ../shell-ip-address

	local repr=0:0:0:0:2::
	local target=other
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t04() { # UnitTest
	. ../shell-ip-address

	local repr=0:0:0:0:0:ffff:7f00:1
	local target=ipv4-mapped
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t05() { # UnitTest
	. ../shell-ip-address

	local repr=0:0:0:0:0:ffff:198.15.0.5
	local target=ipv4-mapped
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t06() { # UnitTest
	. ../shell-ip-address

	local repr=0:0:0:0:ffff:0:7f00:1
	local target=other
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t08() { # UnitTest
	. ../shell-ip-address

	local repr=2001::3
	local target=other
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t09() { # UnitTest
	. ../shell-ip-address

	local repr=2001:db8::
	local target=other
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t10() { # UnitTest
	. ../shell-ip-address

	local repr=2001:db8:0:8a96:0:ffff::
	local target=other
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t11() { # UnitTest
	. ../shell-ip-address

	local repr=2001:db8:8a96:33::
	local target=other
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t12() { # UnitTest
	. ../shell-ip-address

	local repr=2001:db8:8a96:33::5.0.0.5
	local target=other
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t16() { # UnitTest
	. ../shell-ip-address

	# Link-scope unicast address.
	local repr=fe80::8
	local target=link-local
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t17() { # UnitTest
	. ../shell-ip-address

	# Link-scope unicast address.
	local repr=feba:d0ba::
	local target=link-local
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t18() { # UnitTest
	. ../shell-ip-address

	# Link-scope multicast address.
	local repr=ff02::1:2
	local target=multicast
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t19() { # UnitTest
	. ../shell-ip-address

	# Site-scope multicast address.
	local repr=ff05::1:3
	local target=multicast
	assertEquals "'$repr' is $target" "$target" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t20() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=''
	ipv6_addr_type "$repr" || rc=1
	assertFalse "empty string" $rc
	assertNull "empty output" "$(ipv6_addr_type "$repr")"
}

ip_address_test6t21() { # UnitTest
	. ../shell-ip-address

	local rc=0
	local repr=ffff:::::::
	ipv6_addr_type "$repr" || rc=1
	assertFalse "malformed address: $repr" $rc
	assertNull "empty output" "$(ipv6_addr_type "$repr")"
}
